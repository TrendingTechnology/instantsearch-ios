// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: prot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum WidgetType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case hitsSearcher // = 1
  case facetSearcher // = 2
  case multiSearcher // = 3
  case answersSearcher // = 4
  case filterState // = 5
  case dynamicFacets // = 6
  case hierarchicalFacets // = 7
  case facetList // = 8
  case filterClear // = 9
  case filterList // = 10
  case filterToggle // = 11
  case numberFilter // = 12
  case numberRangeFilter // = 13
  case currentFilters // = 14
  case hits // = 15
  case loading // = 16
  case stats // = 17
  case queryInput // = 18
  case queryRuleCustomData // = 19
  case relevantSort // = 20
  case sortBy // = 21
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .hitsSearcher
    case 2: self = .facetSearcher
    case 3: self = .multiSearcher
    case 4: self = .answersSearcher
    case 5: self = .filterState
    case 6: self = .dynamicFacets
    case 7: self = .hierarchicalFacets
    case 8: self = .facetList
    case 9: self = .filterClear
    case 10: self = .filterList
    case 11: self = .filterToggle
    case 12: self = .numberFilter
    case 13: self = .numberRangeFilter
    case 14: self = .currentFilters
    case 15: self = .hits
    case 16: self = .loading
    case 17: self = .stats
    case 18: self = .queryInput
    case 19: self = .queryRuleCustomData
    case 20: self = .relevantSort
    case 21: self = .sortBy
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .hitsSearcher: return 1
    case .facetSearcher: return 2
    case .multiSearcher: return 3
    case .answersSearcher: return 4
    case .filterState: return 5
    case .dynamicFacets: return 6
    case .hierarchicalFacets: return 7
    case .facetList: return 8
    case .filterClear: return 9
    case .filterList: return 10
    case .filterToggle: return 11
    case .numberFilter: return 12
    case .numberRangeFilter: return 13
    case .currentFilters: return 14
    case .hits: return 15
    case .loading: return 16
    case .stats: return 17
    case .queryInput: return 18
    case .queryRuleCustomData: return 19
    case .relevantSort: return 20
    case .sortBy: return 21
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WidgetType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [WidgetType] = [
    .unknown,
    .hitsSearcher,
    .facetSearcher,
    .multiSearcher,
    .answersSearcher,
    .filterState,
    .dynamicFacets,
    .hierarchicalFacets,
    .facetList,
    .filterClear,
    .filterList,
    .filterToggle,
    .numberFilter,
    .numberRangeFilter,
    .currentFilters,
    .hits,
    .loading,
    .stats,
    .queryInput,
    .queryRuleCustomData,
    .relevantSort,
    .sortBy,
  ]
}

#endif  // swift(>=4.2)

enum WidgetParams: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case appID // = 0
  case apiKey // = 1
  case indexName // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .appID
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .appID
    case 1: self = .apiKey
    case 2: self = .indexName
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .appID: return 0
    case .apiKey: return 1
    case .indexName: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WidgetParams: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [WidgetParams] = [
    .appID,
    .apiKey,
    .indexName,
  ]
}

#endif  // swift(>=4.2)

struct Widget {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: WidgetType = .unknown

  var params: [WidgetParams] = []

  var useConnector: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Schema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var widgets: [Widget] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WidgetType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "hitsSearcher"),
    2: .same(proto: "facetSearcher"),
    3: .same(proto: "multiSearcher"),
    4: .same(proto: "answersSearcher"),
    5: .same(proto: "filterState"),
    6: .same(proto: "dynamicFacets"),
    7: .same(proto: "hierarchicalFacets"),
    8: .same(proto: "facetList"),
    9: .same(proto: "filterClear"),
    10: .same(proto: "filterList"),
    11: .same(proto: "filterToggle"),
    12: .same(proto: "numberFilter"),
    13: .same(proto: "numberRangeFilter"),
    14: .same(proto: "currentFilters"),
    15: .same(proto: "hits"),
    16: .same(proto: "loading"),
    17: .same(proto: "stats"),
    18: .same(proto: "queryInput"),
    19: .same(proto: "queryRuleCustomData"),
    20: .same(proto: "relevantSort"),
    21: .same(proto: "sortBy"),
  ]
}

extension WidgetParams: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "appID"),
    1: .same(proto: "apiKey"),
    2: .same(proto: "indexName"),
  ]
}

extension Widget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Widget"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    600: .same(proto: "type"),
    601: .same(proto: "params"),
    602: .same(proto: "useConnector"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 600: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 601: try { try decoder.decodeRepeatedEnumField(value: &self.params) }()
      case 602: try { try decoder.decodeSingularBoolField(value: &self.useConnector) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 600)
    }
    if !self.params.isEmpty {
      try visitor.visitPackedEnumField(value: self.params, fieldNumber: 601)
    }
    if self.useConnector != false {
      try visitor.visitSingularBoolField(value: self.useConnector, fieldNumber: 602)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Widget, rhs: Widget) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.params != rhs.params {return false}
    if lhs.useConnector != rhs.useConnector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Schema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Schema"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    700: .same(proto: "widgets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 700: try { try decoder.decodeRepeatedMessageField(value: &self.widgets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.widgets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.widgets, fieldNumber: 700)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Schema, rhs: Schema) -> Bool {
    if lhs.widgets != rhs.widgets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
